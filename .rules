# üö® REGLAS CR√çTICAS DEL PROYECTO - TOULOUSE DESIGN SYSTEM

## ‚ùå PROHIBIDO: FALLBACKS
- **NUNCA** usar fallbacks silenciosos que oculten errores
- **NUNCA** continuar la ejecuci√≥n si hay errores cr√≠ticos
- **NUNCA** generar archivos parciales o con errores
- **SIEMPRE** fallar r√°pido con errores claros y espec√≠ficos
- **SIEMPRE** hacer rollback completo si algo falla

### ‚ùå Ejemplos PROHIBIDOS:
```javascript
// ‚ùå PROHIBIDO - Fallback silencioso
try {
    result = criticalOperation();
} catch (error) {
    console.warn('Error ignorado, continuando...');
    result = 'default_value'; // NUNCA HACER ESTO
}

// ‚ùå PROHIBIDO - Continuar con errores
if (!config.analytics.measurementId) {
    console.warn('GA4 ID faltante, deshabilitando analytics...');
    config.analytics.enabled = false; // NUNCA HACER ESTO
}
```

### ‚úÖ Ejemplos CORRECTOS:
```javascript
// ‚úÖ CORRECTO - Fail fast
if (!config.analytics.measurementId) {
    throw new Error('‚ùå FALTA GA4 Measurement ID en config.js ‚Üí analytics.googleAnalytics.measurementId');
}

// ‚úÖ CORRECTO - Rollback completo
if (error) {
    await rollbackCompleteGeneration();
    throw new Error(`‚ùå Generaci√≥n fall√≥: ${error.message}`);
}
```

## üéØ FAIL-FAST PRINCIPLES

1. **DETECTAR errores temprano**
2. **FALLAR r√°pido** con mensajes claros
3. **ROLLBACK completo** - no dejar archivos parciales
4. **MOSTRAR ubicaci√≥n exacta** del problema (archivo:l√≠nea)
5. **PROPONER soluci√≥n espec√≠fica** en el mensaje de error

## üìã VALIDACIONES OBLIGATORIAS

### ‚ö†Ô∏è Antes de cualquier generaci√≥n:
- [ ] **OBLIGATORIO**: Ejecutar `nvm use 24` SIEMPRE
- [ ] Verificar que `config.js` tenga todos los valores requeridos
- [ ] Verificar que `component-metadata.json` sea v√°lido
- [ ] Verificar que Node.js sea versi√≥n 24+ (auto-validado)
- [ ] Verificar que PHP CLI est√© disponible
- [ ] Verificar que Vite config sea v√°lido

### üîß COMANDOS OBLIGATORIOS ANTES DE GENERAR:
```bash
nvm use 24              # SIEMPRE ejecutar PRIMERO
npm run wp:generate     # Despu√©s de nvm use 24
```

### ‚ö†Ô∏è Durante la generaci√≥n:
- [ ] Validar cada archivo PHP inmediatamente despu√©s de crearlo
- [ ] Verificar que cada extensi√≥n se cargue correctamente
- [ ] Validar que cada manager tenga configuraci√≥n v√°lida
- [ ] Verificar sintaxis de templates generados

### ‚ö†Ô∏è Despu√©s de la generaci√≥n:
- [ ] Validar sintaxis completa de PHP con `php -l`
- [ ] Verificar que todos los archivos requeridos existan
- [ ] Validar estructura de directorios
- [ ] Probar URLs si WordPress est√° corriendo

## üö´ CASOS DE ERROR COMUNES

### 1. Configuraci√≥n Faltante
```javascript
// ‚ùå ANTES (con fallback)
const measurementId = config.analytics?.googleAnalytics?.measurementId || 'G-DEFAULT';

// ‚úÖ DESPU√âS (fail fast)
if (!config.analytics?.googleAnalytics?.measurementId) {
    throw new Error('‚ùå CONFIGURACI√ìN FALTANTE: GA4 Measurement ID requerido en config.js');
}
```

### 2. Archivos Faltantes
```javascript
// ‚ùå ANTES (con fallback)
if (!fs.existsSync(metadataFile)) {
    console.warn('Metadata no encontrado, usando defaults...');
    return defaultMetadata;
}

// ‚úÖ DESPU√âS (fail fast)
if (!fs.existsSync(metadataFile)) {
    throw new Error(`‚ùå ARCHIVO REQUERIDO: ${metadataFile} no encontrado`);
}
```

### 3. Versi√≥n de Node.js
```javascript
// ‚ùå ANTES (con fallback)
if (nodeVersion < 20) {
    console.warn('Node.js antiguo, algunas features pueden no funcionar...');
}

// ‚úÖ DESPU√âS (fail fast)
if (nodeVersion < 24) {
    throw new Error('‚ùå VERSI√ìN REQUERIDA: Node.js 24+ requerido. Actual: ' + nodeVersion);
}
```

### 4. Errores de Build
```javascript
// ‚ùå ANTES (con fallback)
try {
    await runViteBuild();
} catch (error) {
    console.warn('Build fall√≥, usando assets b√°sicos...');
    await generateBasicAssets();
}

// ‚úÖ DESPU√âS (fail fast)
try {
    await runViteBuild();
} catch (error) {
    await rollbackGeneration();
    throw new Error(`‚ùå BUILD FALL√ì: ${error.message}\nüí° Ejecutar: npm run build para debug`);
}
```

## üîß COMANDOS DE VALIDACI√ìN

### Antes de desarrollar:
```bash
nvm use 24                # SIEMPRE usar Node 24
npm run wp:validate-php   # Validar sintaxis PHP
npm run build             # Verificar que Vite funcione
```

### Durante desarrollo:
```bash
npm run wp:generate       # Debe fallar si hay problemas
npm run wp:test-urls      # Validar URLs en vivo
```

## üìù MENSAJES DE ERROR REQUERIDOS

Todos los errores DEBEN incluir:

1. **‚ùå S√≠mbolo de error claro**
2. **Descripci√≥n espec√≠fica** del problema
3. **Ubicaci√≥n exacta** (archivo:l√≠nea si aplica)
4. **üí° Soluci√≥n propuesta** clara y actionable
5. **üßπ Rollback notification** si se ejecut√≥

### Ejemplo de mensaje CORRECTO:
```
‚ùå ANALYTICS MANAGER FALL√ì: GA4 Measurement ID no configurado
üìç Ubicaci√≥n: scripts/wp-generator/core/config.js l√≠nea 81
üí° Soluci√≥n: Cambiar 'G-XXXXXXXXXX' por tu GA4 ID real
üßπ Rollback ejecutado: archivos PHP limpiados
```

## üõ°Ô∏è ENFORCEMENT

### En c√≥digo JavaScript:
```javascript
// Al inicio de cada manager
if (process.env.NODE_ENV !== 'test') {
    console.log('üö® FAIL-FAST MODE: Errores causar√°n terminaci√≥n inmediata');
}
```

### En scripts npm:
```json
{
  "scripts": {
    "wp:generate": "node -e \"process.env.FAIL_FAST=true\" && node scripts/config/generate-wp-templates.js"
  }
}
```

---

**üéØ RECUERDA: "Si hay errores que los procesos se trunquen, sino vamos a generar archivos que no sirven"**

## üö® REGLA CR√çTICA: NO MODIFICAR ARCHIVOS GENERADOS

### ‚ùå PROHIBIDO:
- **NUNCA** modificar archivos en `wordpress-output/` directamente
- **NUNCA** editar `.php` generados manualmente
- **NUNCA** hacer cambios temporales en archivos de salida

### ‚úÖ CORRECTO:
- **SIEMPRE** modificar los generadores en `scripts/wp-generator/`
- **SIEMPRE** regenerar el tema completo despu√©s de cambios
- **SIEMPRE** probar con `npm run wp:generate` despu√©s de modificar generadores

### üìç Ubicaciones de generadores:
- `scripts/wp-generator/managers/analytics-manager.js` ‚Üí `inc/analytics-manager.php`
- `scripts/wp-generator/templates/functions-template.js` ‚Üí `functions.php`
- `scripts/wp-generator/templates/php-components.js` ‚Üí `components/*.php`
- `scripts/wp-generator/managers/seo-manager.js` ‚Üí `inc/seo-manager.php`

### üîÑ Flujo CORRECTO para fixes:
1. Identificar problema en archivo generado
2. Localizar el generador correspondiente
3. Modificar el generador
4. Ejecutar `npm run wp:generate`
5. Validar con `npm run wp:test-urls`


üõ°Ô∏è REGLAS DE WORDPRESS DEVELOPMENT

‚úÖ Escapado y Sanitizaci√≥n Obligatoria
	‚Ä¢	OBLIGATORIO escapar salidas din√°micas:
	‚Ä¢	esc_html() ‚Üí texto
	‚Ä¢	esc_url() ‚Üí urls
	‚Ä¢	esc_attr() ‚Üí atributos HTML
	‚Ä¢	wp_kses_post() ‚Üí contenido rico
	‚Ä¢	OBLIGATORIO sanitizar inputs con sanitize_text_field(), sanitize_email(), etc.
	‚Ä¢	‚ùå PROHIBIDO imprimir datos de WP sin escape.

üåç Internacionalizaci√≥n (i18n)
	‚Ä¢	OBLIGATORIO envolver textos duros con __(), _e(), esc_html__(), etc.
	‚Ä¢	OBLIGATORIO usar un text-domain consistente.
	‚Ä¢	‚ùå PROHIBIDO hardcodear strings sin traducci√≥n.

üìÇ Organizaci√≥n y Estructura
	‚Ä¢	OBLIGATORIO seguir jerarqu√≠a de plantillas de WP (page.php, single.php, etc.).
	‚Ä¢	OBLIGATORIO usar get_template_part() en lugar de require.
	‚Ä¢	OBLIGATORIO mantener queries en inc/ y presentaci√≥n en plantillas.
	‚Ä¢	‚ùå PROHIBIDO mezclar queries complejas en plantillas.

‚öôÔ∏è Queries y Loop
	‚Ä¢	OBLIGATORIO usar WP_Query si hay paginaci√≥n o control avanzado.
	‚Ä¢	OBLIGATORIO llamar wp_reset_postdata() tras un loop secundario.
	‚Ä¢	‚ùå PROHIBIDO queries sin par√°metros seguros.

üîí Seguridad
	‚Ä¢	OBLIGATORIO wp_nonce_field() y check_admin_referer() en formularios.
	‚Ä¢	OBLIGATORIO validar todos los $_POST, $_GET, $_REQUEST.
	‚Ä¢	‚ùå PROHIBIDO usar valores de usuario sin validar.

üé® Encolado de Scripts y Estilos
	‚Ä¢	OBLIGATORIO wp_enqueue_script y wp_enqueue_style.
	‚Ä¢	‚ùå PROHIBIDO inyectar <script> o <link> en plantillas.

üì¢ Errores y Debug
	‚Ä¢	OBLIGATORIO usar wp_die() en errores cr√≠ticos.
	‚Ä¢	OBLIGATORIO deshabilitar WP_DEBUG_DISPLAY en producci√≥n.

‚∏ª

üõ°Ô∏è REGLAS ADICIONALES PARA ACF
	‚Ä¢	‚ùå PROHIBIDO usar the_field() ‚Üí siempre usar get_field() + escape.
	‚Ä¢	‚úÖ OBLIGATORIO validar campos requeridos. Fallar r√°pido si no existen.
	‚Ä¢	‚úÖ OBLIGATORIO escapar seg√∫n tipo de campo:
	‚Ä¢	Texto ‚Üí esc_html()
	‚Ä¢	URL ‚Üí esc_url()
	‚Ä¢	WYSIWYG ‚Üí wp_kses_post()
	‚Ä¢	‚úÖ OBLIGATORIO sanitizar en acf/update_value antes de guardar.
	‚Ä¢	‚úÖ OBLIGATORIO documentar en component-metadata.json qu√© campos ACF usa cada componente.
	‚Ä¢	‚ùå PROHIBIDO hardcodear valores de ACF como fallback.

## üö® REGLA CR√çTICA: CODIFICACI√ìN ROBUSTA Y ESCALABLE

### ‚ùå PROHIBIDO: C√ìDIGO FR√ÅGIL Y FIXES PUNTUALES
- **NUNCA** implementar fixes que solo arreglen s√≠ntomas espec√≠ficos
- **NUNCA** crear soluciones que solo funcionen para casos particulares
- **NUNCA** usar bandas temporales (flags, hacks) sin solucionar la causa ra√≠z
- **SIEMPRE** analizar la causa ra√≠z de los problemas
- **SIEMPRE** implementar soluciones comprehensivas que manejen todos los contextos

### ‚úÖ OBLIGATORIO: ARQUITECTURA ROBUSTA
- **OBLIGATORIO** implementar sistemas de contexto completos para todas las conversiones
- **OBLIGATORIO** manejar todos los scopes (variables, loops, par√°metros, funciones)
- **OBLIGATORIO** validar consistencia de variables en todos los contextos
- **OBLIGATORIO** dise√±ar sistemas que escalen para casos futuros no previstos

### üìã VALIDACIONES DE ROBUSTEZ OBLIGATORIAS

#### Para Babel AST Converter:
- [ ] **OBLIGATORIO**: Sistema de contexto comprehensivo que maneje:
  - Variables disponibles en cada scope
  - Contexto de loops (foreach, while, for)
  - Contexto de funciones y par√°metros
  - Contexto de condicionales anidadas
- [ ] **OBLIGATORIO**: Validaci√≥n de variables antes de uso
- [ ] **OBLIGATORIO**: Mapeo correcto de variables entre contextos (JS ‚Üí PHP)
- [ ] **OBLIGATORIO**: Fail-fast si variable no definida en contexto

#### Para Generadores WordPress:
- [ ] **OBLIGATORIO**: Cada generador debe validar completamente sus inputs
- [ ] **OBLIGATORIO**: Sistemas de rollback granulares por m√≥dulo
- [ ] **OBLIGATORIO**: Contexto de dependencias entre managers
- [ ] **OBLIGATORIO**: Validaci√≥n cruzada entre archivos generados

### üéØ PRINCIPIOS DE DISE√ëO ROBUSTO

1. **CONTEXTO COMPLETO**: Cada sistema debe manejar todos los contextos posibles
2. **VALIDACI√ìN EXHAUSTIVA**: Validar cada variable, par√°metro, dependencia
3. **FAIL-FAST INTELIGENTE**: Fallar temprano con informaci√≥n de contexto
4. **ESCALABILIDAD INHERENTE**: Dise√±ar para casos no previstos

### ‚ùå Ejemplos PROHIBIDOS (FIXES PUNTUALES):
```javascript
// ‚ùå PROHIBIDO - Fix puntual solo para PHP tags
if (this.inPHPContext) {
    // Solo arregla s√≠ntoma, no causa ra√≠z
}

// ‚ùå PROHIBIDO - Hardcodear variables espec√≠ficas
if (variableName === 'showSuggestions') {
    // Solo funciona para este caso espec√≠fico
}
```

### ‚úÖ Ejemplos CORRECTOS (SISTEMAS ROBUSTOS):
```javascript
// ‚úÖ CORRECTO - Sistema de contexto comprehensivo
class ContextTracker {
    constructor() {
        this.scopes = [];
        this.variables = new Map();
        this.loops = new Map();
    }

    validateVariable(name, context) {
        if (!this.isVariableAvailable(name, context)) {
            throw new Error(`‚ùå VARIABLE NO DEFINIDA: ${name} en contexto ${context}`);
        }
    }
}

// ‚úÖ CORRECTO - Mapeo completo de contextos
convertToPhp(node, context) {
    const phpContext = this.contextMapper.mapContext(node, context);
    return this.generatePhpWithContext(node, phpContext);
}
```

**üéØ OBJETIVO**: Toda codificaci√≥n debe ser robusta, escalable y manejar contextos completos - sin excepciones ni fixes puntuales.