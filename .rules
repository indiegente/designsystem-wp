# üö® REGLAS CR√çTICAS DEL PROYECTO - TOULOUSE DESIGN SYSTEM

## ‚ùå PROHIBIDO: FALLBACKS
- **NUNCA** usar fallbacks silenciosos que oculten errores
- **NUNCA** continuar la ejecuci√≥n si hay errores cr√≠ticos
- **NUNCA** generar archivos parciales o con errores
- **SIEMPRE** fallar r√°pido con errores claros y espec√≠ficos
- **SIEMPRE** hacer rollback completo si algo falla

### ‚ùå Ejemplos PROHIBIDOS:
```javascript
// ‚ùå PROHIBIDO - Fallback silencioso
try {
    result = criticalOperation();
} catch (error) {
    console.warn('Error ignorado, continuando...');
    result = 'default_value'; // NUNCA HACER ESTO
}

// ‚ùå PROHIBIDO - Continuar con errores
if (!config.analytics.measurementId) {
    console.warn('GA4 ID faltante, deshabilitando analytics...');
    config.analytics.enabled = false; // NUNCA HACER ESTO
}
```

### ‚úÖ Ejemplos CORRECTOS:
```javascript
// ‚úÖ CORRECTO - Fail fast
if (!config.analytics.measurementId) {
    throw new Error('‚ùå FALTA GA4 Measurement ID en config.js ‚Üí analytics.googleAnalytics.measurementId');
}

// ‚úÖ CORRECTO - Rollback completo
if (error) {
    await rollbackCompleteGeneration();
    throw new Error(`‚ùå Generaci√≥n fall√≥: ${error.message}`);
}
```

## üéØ FAIL-FAST PRINCIPLES

1. **DETECTAR errores temprano**
2. **FALLAR r√°pido** con mensajes claros
3. **ROLLBACK completo** - no dejar archivos parciales
4. **MOSTRAR ubicaci√≥n exacta** del problema (archivo:l√≠nea)
5. **PROPONER soluci√≥n espec√≠fica** en el mensaje de error

## üìã VALIDACIONES OBLIGATORIAS

### ‚ö†Ô∏è Antes de cualquier generaci√≥n:
- [ ] **OBLIGATORIO**: Ejecutar `nvm use 24` SIEMPRE
- [ ] Verificar que `config.js` tenga todos los valores requeridos
- [ ] Verificar que `component-metadata.json` sea v√°lido
- [ ] Verificar que Node.js sea versi√≥n 24+ (auto-validado)
- [ ] Verificar que PHP CLI est√© disponible
- [ ] Verificar que Vite config sea v√°lido

### üîß COMANDOS OBLIGATORIOS ANTES DE GENERAR:
```bash
nvm use 24              # SIEMPRE ejecutar PRIMERO
npm run wp:generate     # Despu√©s de nvm use 24
```

### ‚ö†Ô∏è Durante la generaci√≥n:
- [ ] Validar cada archivo PHP inmediatamente despu√©s de crearlo
- [ ] Verificar que cada extensi√≥n se cargue correctamente
- [ ] Validar que cada manager tenga configuraci√≥n v√°lida
- [ ] Verificar sintaxis de templates generados

### ‚ö†Ô∏è Despu√©s de la generaci√≥n:
- [ ] Validar sintaxis completa de PHP con `php -l`
- [ ] Verificar que todos los archivos requeridos existan
- [ ] Validar estructura de directorios
- [ ] Probar URLs si WordPress est√° corriendo

## üö´ CASOS DE ERROR COMUNES

### 1. Configuraci√≥n Faltante
```javascript
// ‚ùå ANTES (con fallback)
const measurementId = config.analytics?.googleAnalytics?.measurementId || 'G-DEFAULT';

// ‚úÖ DESPU√âS (fail fast)
if (!config.analytics?.googleAnalytics?.measurementId) {
    throw new Error('‚ùå CONFIGURACI√ìN FALTANTE: GA4 Measurement ID requerido en config.js');
}
```

### 2. Archivos Faltantes
```javascript
// ‚ùå ANTES (con fallback)
if (!fs.existsSync(metadataFile)) {
    console.warn('Metadata no encontrado, usando defaults...');
    return defaultMetadata;
}

// ‚úÖ DESPU√âS (fail fast)
if (!fs.existsSync(metadataFile)) {
    throw new Error(`‚ùå ARCHIVO REQUERIDO: ${metadataFile} no encontrado`);
}
```

### 3. Versi√≥n de Node.js
```javascript
// ‚ùå ANTES (con fallback)
if (nodeVersion < 20) {
    console.warn('Node.js antiguo, algunas features pueden no funcionar...');
}

// ‚úÖ DESPU√âS (fail fast)
if (nodeVersion < 24) {
    throw new Error('‚ùå VERSI√ìN REQUERIDA: Node.js 24+ requerido. Actual: ' + nodeVersion);
}
```

### 4. Errores de Build
```javascript
// ‚ùå ANTES (con fallback)
try {
    await runViteBuild();
} catch (error) {
    console.warn('Build fall√≥, usando assets b√°sicos...');
    await generateBasicAssets();
}

// ‚úÖ DESPU√âS (fail fast)
try {
    await runViteBuild();
} catch (error) {
    await rollbackGeneration();
    throw new Error(`‚ùå BUILD FALL√ì: ${error.message}\nüí° Ejecutar: npm run build para debug`);
}
```

## üîß COMANDOS DE VALIDACI√ìN

### Antes de desarrollar:
```bash
nvm use 24                # SIEMPRE usar Node 24
npm run wp:validate-php   # Validar sintaxis PHP
npm run build             # Verificar que Vite funcione
```

### Durante desarrollo:
```bash
npm run wp:generate       # Debe fallar si hay problemas
npm run wp:test-urls      # Validar URLs en vivo
```

## üìù MENSAJES DE ERROR REQUERIDOS

Todos los errores DEBEN incluir:

1. **‚ùå S√≠mbolo de error claro**
2. **Descripci√≥n espec√≠fica** del problema
3. **Ubicaci√≥n exacta** (archivo:l√≠nea si aplica)
4. **üí° Soluci√≥n propuesta** clara y actionable
5. **üßπ Rollback notification** si se ejecut√≥

### Ejemplo de mensaje CORRECTO:
```
‚ùå ANALYTICS MANAGER FALL√ì: GA4 Measurement ID no configurado
üìç Ubicaci√≥n: scripts/wp-generator/core/config.js l√≠nea 81
üí° Soluci√≥n: Cambiar 'G-XXXXXXXXXX' por tu GA4 ID real
üßπ Rollback ejecutado: archivos PHP limpiados
```

## üõ°Ô∏è ENFORCEMENT

### En c√≥digo JavaScript:
```javascript
// Al inicio de cada manager
if (process.env.NODE_ENV !== 'test') {
    console.log('üö® FAIL-FAST MODE: Errores causar√°n terminaci√≥n inmediata');
}
```

### En scripts npm:
```json
{
  "scripts": {
    "wp:generate": "node -e \"process.env.FAIL_FAST=true\" && node scripts/config/generate-wp-templates.js"
  }
}
```

---

**üéØ RECUERDA: "Si hay errores que los procesos se trunquen, sino vamos a generar archivos que no sirven"**